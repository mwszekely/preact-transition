@use "./base.scss" as *;

.#{$transition-class-name}-zoom {

    // Set the transform origin regardless of what phase we're in
    transform-origin: calc(var(--#{$transition-class-name}-zoom-origin-x) * 100%) calc(var(--#{$transition-class-name}-zoom-origin-y) * 100%);
    


    // Now handle the transform based on the current writing mode
    &.#{$transition-class-name}-enter-init, &.transition-exit-transition, &.transition-exit-finalize { 
        transform: scale(calc(var(--#{$transition-class-name}-zoom-min-x) * 100%), calc(var(--#{$transition-class-name}-zoom-min-y) * 100%)); 

        @media (prefers-reduced-motion) { 
          transform: none;
        }
    }
    
    
    
    &.#{$transition-class-name}-enter-init, &.transition-enter-transition, &.transition-enter-finalize { transform: scale(1, 1); }


    
  

    // Handle converting all our inline and block values to the X and Y coordinates most other CSS expects
    --#{$transition-class-name}-zoom-min-x: calc(0 + var(--#{$transition-class-name}-zoom-min-inline));
    --#{$transition-class-name}-zoom-min-y: calc(0 + var(--#{$transition-class-name}-zoom-min-block));
    --#{$transition-class-name}-zoom-origin-x: calc(0 + var(--#{$transition-class-name}-zoom-origin-inline));
    --#{$transition-class-name}-zoom-origin-y: calc(0 + var(--#{$transition-class-name}-zoom-origin-block));
  
    &.transition-inline-direction-ltr, &.transition-inline-direction-rtl, &.transition-block-direction-ttb, &.transition-block-direction-btt {
      --#{$transition-class-name}-zoom-min-x: calc(0 + var(--#{$transition-class-name}-zoom-min-inline));
      --#{$transition-class-name}-zoom-min-y: calc(0 + var(--#{$transition-class-name}-zoom-min-block));
    }
    &.transition-block-direction-ltr, &.transition-block-direction-rtl, &.transition-inline-direction-ttb, &.transition-inline-direction-btt {
      --#{$transition-class-name}-zoom-min-x: calc(0 + var(--#{$transition-class-name}-zoom-min-block));
      --#{$transition-class-name}-zoom-min-y: calc(0 + var(--#{$transition-class-name}-zoom-min-inline));
    }

  
    &.transition-inline-direction-ltr {
      --#{$transition-class-name}-zoom-origin-x: calc(0 + var(--#{$transition-class-name}-zoom-origin-inline));
    }
  
    &.transition-inline-direction-rtl {
      --#{$transition-class-name}-zoom-origin-x: calc(1 - var(--#{$transition-class-name}-zoom-origin-inline));
    }
  
    &.transition-block-direction-ttb {
      --#{$transition-class-name}-zoom-origin-y: calc(0 + var(--#{$transition-class-name}-zoom-origin-block));
    }
  
    &.transition-block-direction-btt {
      --#{$transition-class-name}-zoom-origin-y: calc(1 - var(--#{$transition-class-name}-zoom-origin-block));
    }
  
  
  
    &.transition-block-direction-ltr {
      --#{$transition-class-name}-zoom-origin-x: calc(0 + var(--#{$transition-class-name}-zoom-origin-block));
    }
    &.transition-block-direction-rtl {
      --#{$transition-class-name}-zoom-origin-x: calc(1 - var(--#{$transition-class-name}-zoom-origin-block));
    }
  
    &.transition-inline-direction-ttb {
      --#{$transition-class-name}-zoom-origin-y: calc(0 + var(--#{$transition-class-name}-zoom-origin-inline));
    }
  
    &.transition-inline-direction-btt {
      --#{$transition-class-name}-zoom-origin-y: calc(1 - var(--#{$transition-class-name}-zoom-origin-inline));
    }



}
